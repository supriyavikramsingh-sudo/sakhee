From 94591a61d2965649492a09991a8b3935c76b2369 Mon Sep 17 00:00:00 2001
From: root
 <root@vm-e10f32fe-0b71-47bb-b3c9-0c96545e779c.e4btbpvrjvkuvnkuupkx1massg.bx.internal.cloudapp.net>
Date: Thu, 30 Oct 2025 06:18:51 +0000
Subject: [PATCH] feat(chat): Implement chat feedback system with thumbs
 up/down buttons

- Add ChatFeedback interface and FeedbackService for API communication
- Implement thumbs up/down buttons in MessageBubble component
- Add feedback state management and visual feedback in ChatInterface
- Create backend feedback API endpoints (POST /feedback, GET /feedback/:userId)
- Add feedback route registration in server index.js
- Update apiClient with proper error handling
- Add feedback submission with user context and message tracking

Features implemented:
- Individual message feedback with thumbs up/down buttons
- Feedback tied to user ID, prompt, and AI response
- Backend storage and retrieval of feedback data
- Visual feedback states (highlighted buttons after selection)
- Proper TypeScript interfaces and error handling

Resolves Feature #9: Chat Feedback Implementation
---
 frontend/package.json                         |   1 +
 .../src/components/chat/ChatInterface.tsx     |  15 +-
 .../src/components/chat/MessageBubble.tsx     |  72 +++-
 frontend/src/services/apiClient.ts            |  12 -
 frontend/src/services/feedbackService.ts      |  47 +++
 package-lock.json                             | 369 +++---------------
 server/src/index.js                           |   2 +
 server/src/routes/chat.js                     |  90 +++++
 server/src/routes/feedback.js                 | 130 ++++++
 9 files changed, 403 insertions(+), 335 deletions(-)
 create mode 100644 frontend/src/services/feedbackService.ts
 create mode 100644 server/src/routes/feedback.js

diff --git a/frontend/package.json b/frontend/package.json
index 914b7c6..f0474e0 100644
--- a/frontend/package.json
+++ b/frontend/package.json
@@ -44,6 +44,7 @@
     "postcss": "^8.5.6",
     "prettier": "^2.8.8",
     "tailwindcss": "^3.4.18",
+    "terser": "^5.44.0",
     "vite": "^5.0.8",
     "vitest": "^0.34.6"
   }
diff --git a/frontend/src/components/chat/ChatInterface.tsx b/frontend/src/components/chat/ChatInterface.tsx
index d688c70..e629009 100644
--- a/frontend/src/components/chat/ChatInterface.tsx
+++ b/frontend/src/components/chat/ChatInterface.tsx
@@ -265,13 +265,26 @@ const ChatInterface = ({ userProfile, userId }: ChatInterfaceProps) => {
             )}
 
             {messages.map((msg, idx) => {
+              // Find the user prompt for AI messages (look at previous message)
+              let userPrompt = '';
+              if (msg.type === 'assistant' && idx > 0) {
+                const prevMsg = messages[idx - 1];
+                if (prevMsg.type === 'user') {
+                  userPrompt = prevMsg.content;
+                }
+              }
+
               return (
                 <div key={msg.id || idx}>
                   {msg.type === 'meal_plan_redirect' ? (
                     <MealPlanRedirectCard data={msg.redirectData} />
                   ) : (
                     <>
-                      <MessageBubble message={msg} />
+                      <MessageBubble 
+                        message={msg} 
+                        messageId={msg.id?.toString() || `msg-${idx}`}
+                        userPrompt={userPrompt}
+                      />
                       {msg.sources && msg.sources.length > 0 && (
                         <SourceCitations sources={msg.sources} />
                       )}
diff --git a/frontend/src/components/chat/MessageBubble.tsx b/frontend/src/components/chat/MessageBubble.tsx
index 5828c90..42869ac 100644
--- a/frontend/src/components/chat/MessageBubble.tsx
+++ b/frontend/src/components/chat/MessageBubble.tsx
@@ -1,24 +1,56 @@
 import { useState } from 'react';
+import { ThumbsUp, ThumbsDown } from 'lucide-react';
 import { useAuthStore } from '../../store/authStore';
 import { boldify, formatTimestamp } from '../../utils/helper';
+import { feedbackService } from '../../services/feedbackService';
 import Typewriter from './Typewriter';
 import SakheeAvatar from '/images/sakheeai.svg';
-
 interface MessageBubbleProps {
   message: {
-    type: 'user' | 'bot' | 'error';
+    id?: string | number;
+    type: 'user' | 'bot' | 'error' | 'assistant';
     content: string;
     timestamp: any;
     requiresDoctor?: boolean;
     severity?: 'normal' | 'critical';
   };
+  userPrompt?: string;
 }
 
-const MessageBubble = ({ message }: MessageBubbleProps) => {
+
+const MessageBubble = ({ message, userPrompt }: MessageBubbleProps) => {
   const isUser = message.type === 'user';
   const isError = message.type === 'error';
   const { user } = useAuthStore();
   const [isGeneratedCompletly, setIsGeneratedCompletly] = useState(isUser ? true : false);
+  const [feedbackGiven, setFeedbackGiven] = useState<'positive' | 'negative' | null>(null);
+  const [isSubmittingFeedback, setIsSubmittingFeedback] = useState(false);
+  const isAI = message.type === 'bot' || message.type === 'assistant';
+
+  const handleFeedback = async (feedback: 'positive' | 'negative') => {
+    if (!user?.uid || !message.id || !userPrompt || isSubmittingFeedback) return;
+
+    setIsSubmittingFeedback(true);
+    try {
+      const result = await feedbackService.submitFeedback({
+        messageId: message.id.toString(),
+        userId: user.uid,
+        userPrompt,
+        aiResponse: message.content,
+        feedback
+      });
+
+      if (result.success) {
+        setFeedbackGiven(feedback);
+      } else {
+        console.error('Failed to submit feedback:', result.error);
+      }
+    } catch (error) {
+      console.error('Error submitting feedback:', error);
+    } finally {
+      setIsSubmittingFeedback(false);
+    }
+  };
 
   return (
     <div className={`flex gap-1 ${isUser ? 'justify-end' : 'justify-start'}`}>
@@ -52,6 +84,40 @@ const MessageBubble = ({ message }: MessageBubbleProps) => {
         )}
 
         <span className="text-xs opacity-70 mt-1 block">{formatTimestamp(message.timestamp)}</span>
+        
+        {/* Feedback buttons for AI messages */}
+        {isAI && isGeneratedCompletly && (
+          <div className="flex items-center gap-2 mt-2 pt-2 border-t border-opacity-20 border-current">
+            <span className="text-xs opacity-70">Was this helpful?</span>
+            <button
+              onClick={() => handleFeedback('positive')}
+              disabled={isSubmittingFeedback || feedbackGiven !== null}
+              className={`p-1 rounded transition-colors ${
+                feedbackGiven === 'positive'
+                  ? 'text-green-600 bg-green-100'
+                  : 'text-gray-400 hover:text-green-600 hover:bg-green-50'
+              } ${isSubmittingFeedback ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}`}
+              title="Thumbs up"
+            >
+              <ThumbsUp size={14} />
+            </button>
+            <button
+              onClick={() => handleFeedback('negative')}
+              disabled={isSubmittingFeedback || feedbackGiven !== null}
+              className={`p-1 rounded transition-colors ${
+                feedbackGiven === 'negative'
+                  ? 'text-red-600 bg-red-100'
+                  : 'text-gray-400 hover:text-red-600 hover:bg-red-50'
+              } ${isSubmittingFeedback ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}`}
+              title="Thumbs down"
+            >
+              <ThumbsDown size={14} />
+            </button>
+            {isSubmittingFeedback && (
+              <span className="text-xs opacity-70">Submitting...</span>
+            )}
+          </div>
+        )}
       </div>
       {isUser && (
         <img
diff --git a/frontend/src/services/apiClient.ts b/frontend/src/services/apiClient.ts
index c0aaaa8..c08b780 100644
--- a/frontend/src/services/apiClient.ts
+++ b/frontend/src/services/apiClient.ts
@@ -167,18 +167,6 @@ export const apiClient = {
     }
   },
 
-  // ============================================
-  // PROGRESS TRACKING ENDPOINTS (Placeholder)
-  // ============================================
-  getProgress: async (userId: string): Promise<object> => {
-    try {
-      const response = await axiosInstance.get(`/progress/${userId}`);
-      return response;
-    } catch (error) {
-      console.error('Failed to get progress:', error);
-      throw error;
-    }
-  },
   updateProgress: async (userId: string, data): Promise<object> => {
     try {
       const response = await axiosInstance.put(`/progress/${userId}`, data);
diff --git a/frontend/src/services/feedbackService.ts b/frontend/src/services/feedbackService.ts
new file mode 100644
index 0000000..e29799d
--- /dev/null
+++ b/frontend/src/services/feedbackService.ts
@@ -0,0 +1,47 @@
+import apiClient from './apiClient';
+
+export interface ChatFeedback {
+  messageId: string;
+  userId: string;
+  userPrompt: string;
+  aiResponse: string;
+  feedback: 'positive' | 'negative';
+  timestamp: number;
+}
+
+export const feedbackService = {
+  async submitFeedback(feedbackData: Omit<ChatFeedback, 'timestamp'>): Promise<{ success: boolean; error?: string }> {
+    try {
+      // Map frontend feedback values to backend expected values
+      const backendFeedback = feedbackData.feedback === 'positive' ? 'thumbs_up' : 'thumbs_down';
+      
+      const response = await apiClient.post('/api/feedback', {
+        messageId: feedbackData.messageId,
+        userId: feedbackData.userId,
+        userPrompt: feedbackData.userPrompt,
+        aiResponse: feedbackData.aiResponse,
+        feedback: backendFeedback
+      });
+      return { success: true };
+    } catch (error) {
+      console.error('Failed to submit feedback:', error);
+      return { 
+        success: false, 
+        error: error instanceof Error ? error.message : 'Failed to submit feedback' 
+      };
+    }
+  },
+
+  async getFeedbackHistory(userId: string): Promise<{ success: boolean; data?: ChatFeedback[]; error?: string }> {
+    try {
+      const response = await apiClient.get(`/api/feedback/${userId}`);
+      return { success: true, data: response.data };
+    } catch (error) {
+      console.error('Failed to get feedback history:', error);
+      return { 
+        success: false, 
+        error: error instanceof Error ? error.message : 'Failed to get feedback history' 
+      };
+    }
+  }
+};
diff --git a/package-lock.json b/package-lock.json
index 3eb707d..965c9d6 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -93,6 +93,7 @@
         "postcss": "^8.5.6",
         "prettier": "^2.8.8",
         "tailwindcss": "^3.4.18",
+        "terser": "^5.44.0",
         "vite": "^5.0.8",
         "vitest": "^0.34.6"
       }
@@ -2672,6 +2673,17 @@
         "node": ">=6.0.0"
       }
     },
+    "node_modules/@jridgewell/source-map": {
+      "version": "0.3.11",
+      "resolved": "https://registry.npmjs.org/@jridgewell/source-map/-/source-map-0.3.11.tgz",
+      "integrity": "sha512-ZMp1V8ZFcPG5dIWnQLr3NSI1MiCU7UETdS/A0G8V/XWHvJv3ZsFqutJn1Y5RPmAPX6F3BiE397OqveU/9NCuIA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jridgewell/gen-mapping": "^0.3.5",
+        "@jridgewell/trace-mapping": "^0.3.25"
+      }
+    },
     "node_modules/@jridgewell/sourcemap-codec": {
       "version": "1.5.5",
       "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.5.tgz",
@@ -4760,14 +4772,6 @@
         "form-data": "^4.0.4"
       }
     },
-    "node_modules/@types/prop-types": {
-      "version": "15.7.15",
-      "resolved": "https://registry.npmjs.org/@types/prop-types/-/prop-types-15.7.15.tgz",
-      "integrity": "sha512-F6bEyamV9jKGAFBEmlQnesRPGOQqS2+Uwi0Em15xenOxHaf2hv6L8YCVn3rPdPJOiJfPiCnLIRyvwVaqMY3MIw==",
-      "devOptional": true,
-      "license": "MIT",
-      "peer": true
-    },
     "node_modules/@types/raf": {
       "version": "3.4.3",
       "resolved": "https://registry.npmjs.org/@types/raf/-/raf-3.4.3.tgz",
@@ -4775,18 +4779,6 @@
       "license": "MIT",
       "optional": true
     },
-    "node_modules/@types/react": {
-      "version": "18.3.26",
-      "resolved": "https://registry.npmjs.org/@types/react/-/react-18.3.26.tgz",
-      "integrity": "sha512-RFA/bURkcKzx/X9oumPG9Vp3D3JUgus/d0b67KB0t5S/raciymilkOa66olh78MUI92QLbEJevO7rvqU/kjwKA==",
-      "devOptional": true,
-      "license": "MIT",
-      "peer": true,
-      "dependencies": {
-        "@types/prop-types": "*",
-        "csstype": "^3.0.2"
-      }
-    },
     "node_modules/@types/react-dom": {
       "version": "18.3.7",
       "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-18.3.7.tgz",
@@ -8907,19 +8899,6 @@
         "node": ">= 0.4"
       }
     },
-    "node_modules/hnswlib-node": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/hnswlib-node/-/hnswlib-node-3.0.0.tgz",
-      "integrity": "sha512-fypn21qvVORassppC8/qNfZ5KAOspZpm/IbUkAtlqvbtDNnF5VVk5RWF7O5V6qwr7z+T3s1ePej6wQt5wRQ4Cg==",
-      "hasInstallScript": true,
-      "license": "Apache-2.0",
-      "optional": true,
-      "peer": true,
-      "dependencies": {
-        "bindings": "^1.5.0",
-        "node-addon-api": "^8.0.0"
-      }
-    },
     "node_modules/html-escaper": {
       "version": "2.0.2",
       "resolved": "https://registry.npmjs.org/html-escaper/-/html-escaper-2.0.2.tgz",
@@ -9057,7 +9036,7 @@
       "version": "5.3.2",
       "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
       "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
-      "devOptional": true,
+      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">= 4"
@@ -11518,37 +11497,6 @@
         "immediate": "~3.0.5"
       }
     },
-    "node_modules/lightningcss": {
-      "version": "1.30.1",
-      "resolved": "https://registry.npmjs.org/lightningcss/-/lightningcss-1.30.1.tgz",
-      "integrity": "sha512-xi6IyHML+c9+Q3W0S4fCQJOym42pyurFiJUHEcEyHS0CeKzia4yZDEsLlqOFykxOdHpNy0NmvVO31vcSqAxJCg==",
-      "dev": true,
-      "license": "MPL-2.0",
-      "optional": true,
-      "peer": true,
-      "dependencies": {
-        "detect-libc": "^2.0.3"
-      },
-      "engines": {
-        "node": ">= 12.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/parcel"
-      },
-      "optionalDependencies": {
-        "lightningcss-darwin-arm64": "1.30.1",
-        "lightningcss-darwin-x64": "1.30.1",
-        "lightningcss-freebsd-x64": "1.30.1",
-        "lightningcss-linux-arm-gnueabihf": "1.30.1",
-        "lightningcss-linux-arm64-gnu": "1.30.1",
-        "lightningcss-linux-arm64-musl": "1.30.1",
-        "lightningcss-linux-x64-gnu": "1.30.1",
-        "lightningcss-linux-x64-musl": "1.30.1",
-        "lightningcss-win32-arm64-msvc": "1.30.1",
-        "lightningcss-win32-x64-msvc": "1.30.1"
-      }
-    },
     "node_modules/lightningcss-android-arm64": {
       "version": "1.30.2",
       "resolved": "https://registry.npmjs.org/lightningcss-android-arm64/-/lightningcss-android-arm64-1.30.2.tgz",
@@ -11569,226 +11517,6 @@
         "url": "https://opencollective.com/parcel"
       }
     },
-    "node_modules/lightningcss-darwin-arm64": {
-      "version": "1.30.1",
-      "resolved": "https://registry.npmjs.org/lightningcss-darwin-arm64/-/lightningcss-darwin-arm64-1.30.1.tgz",
-      "integrity": "sha512-c8JK7hyE65X1MHMN+Viq9n11RRC7hgin3HhYKhrMyaXflk5GVplZ60IxyoVtzILeKr+xAJwg6zK6sjTBJ0FKYQ==",
-      "cpu": [
-        "arm64"
-      ],
-      "dev": true,
-      "license": "MPL-2.0",
-      "optional": true,
-      "os": [
-        "darwin"
-      ],
-      "peer": true,
-      "engines": {
-        "node": ">= 12.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/parcel"
-      }
-    },
-    "node_modules/lightningcss-darwin-x64": {
-      "version": "1.30.1",
-      "resolved": "https://registry.npmjs.org/lightningcss-darwin-x64/-/lightningcss-darwin-x64-1.30.1.tgz",
-      "integrity": "sha512-k1EvjakfumAQoTfcXUcHQZhSpLlkAuEkdMBsI/ivWw9hL+7FtilQc0Cy3hrx0AAQrVtQAbMI7YjCgYgvn37PzA==",
-      "cpu": [
-        "x64"
-      ],
-      "dev": true,
-      "license": "MPL-2.0",
-      "optional": true,
-      "os": [
-        "darwin"
-      ],
-      "peer": true,
-      "engines": {
-        "node": ">= 12.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/parcel"
-      }
-    },
-    "node_modules/lightningcss-freebsd-x64": {
-      "version": "1.30.1",
-      "resolved": "https://registry.npmjs.org/lightningcss-freebsd-x64/-/lightningcss-freebsd-x64-1.30.1.tgz",
-      "integrity": "sha512-kmW6UGCGg2PcyUE59K5r0kWfKPAVy4SltVeut+umLCFoJ53RdCUWxcRDzO1eTaxf/7Q2H7LTquFHPL5R+Gjyig==",
-      "cpu": [
-        "x64"
-      ],
-      "dev": true,
-      "license": "MPL-2.0",
-      "optional": true,
-      "os": [
-        "freebsd"
-      ],
-      "peer": true,
-      "engines": {
-        "node": ">= 12.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/parcel"
-      }
-    },
-    "node_modules/lightningcss-linux-arm-gnueabihf": {
-      "version": "1.30.1",
-      "resolved": "https://registry.npmjs.org/lightningcss-linux-arm-gnueabihf/-/lightningcss-linux-arm-gnueabihf-1.30.1.tgz",
-      "integrity": "sha512-MjxUShl1v8pit+6D/zSPq9S9dQ2NPFSQwGvxBCYaBYLPlCWuPh9/t1MRS8iUaR8i+a6w7aps+B4N0S1TYP/R+Q==",
-      "cpu": [
-        "arm"
-      ],
-      "dev": true,
-      "license": "MPL-2.0",
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "peer": true,
-      "engines": {
-        "node": ">= 12.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/parcel"
-      }
-    },
-    "node_modules/lightningcss-linux-arm64-gnu": {
-      "version": "1.30.1",
-      "resolved": "https://registry.npmjs.org/lightningcss-linux-arm64-gnu/-/lightningcss-linux-arm64-gnu-1.30.1.tgz",
-      "integrity": "sha512-gB72maP8rmrKsnKYy8XUuXi/4OctJiuQjcuqWNlJQ6jZiWqtPvqFziskH3hnajfvKB27ynbVCucKSm2rkQp4Bw==",
-      "cpu": [
-        "arm64"
-      ],
-      "dev": true,
-      "license": "MPL-2.0",
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "peer": true,
-      "engines": {
-        "node": ">= 12.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/parcel"
-      }
-    },
-    "node_modules/lightningcss-linux-arm64-musl": {
-      "version": "1.30.1",
-      "resolved": "https://registry.npmjs.org/lightningcss-linux-arm64-musl/-/lightningcss-linux-arm64-musl-1.30.1.tgz",
-      "integrity": "sha512-jmUQVx4331m6LIX+0wUhBbmMX7TCfjF5FoOH6SD1CttzuYlGNVpA7QnrmLxrsub43ClTINfGSYyHe2HWeLl5CQ==",
-      "cpu": [
-        "arm64"
-      ],
-      "dev": true,
-      "license": "MPL-2.0",
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "peer": true,
-      "engines": {
-        "node": ">= 12.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/parcel"
-      }
-    },
-    "node_modules/lightningcss-linux-x64-gnu": {
-      "version": "1.30.1",
-      "resolved": "https://registry.npmjs.org/lightningcss-linux-x64-gnu/-/lightningcss-linux-x64-gnu-1.30.1.tgz",
-      "integrity": "sha512-piWx3z4wN8J8z3+O5kO74+yr6ze/dKmPnI7vLqfSqI8bccaTGY5xiSGVIJBDd5K5BHlvVLpUB3S2YCfelyJ1bw==",
-      "cpu": [
-        "x64"
-      ],
-      "dev": true,
-      "license": "MPL-2.0",
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "peer": true,
-      "engines": {
-        "node": ">= 12.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/parcel"
-      }
-    },
-    "node_modules/lightningcss-linux-x64-musl": {
-      "version": "1.30.1",
-      "resolved": "https://registry.npmjs.org/lightningcss-linux-x64-musl/-/lightningcss-linux-x64-musl-1.30.1.tgz",
-      "integrity": "sha512-rRomAK7eIkL+tHY0YPxbc5Dra2gXlI63HL+v1Pdi1a3sC+tJTcFrHX+E86sulgAXeI7rSzDYhPSeHHjqFhqfeQ==",
-      "cpu": [
-        "x64"
-      ],
-      "dev": true,
-      "license": "MPL-2.0",
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "peer": true,
-      "engines": {
-        "node": ">= 12.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/parcel"
-      }
-    },
-    "node_modules/lightningcss-win32-arm64-msvc": {
-      "version": "1.30.1",
-      "resolved": "https://registry.npmjs.org/lightningcss-win32-arm64-msvc/-/lightningcss-win32-arm64-msvc-1.30.1.tgz",
-      "integrity": "sha512-mSL4rqPi4iXq5YVqzSsJgMVFENoa4nGTT/GjO2c0Yl9OuQfPsIfncvLrEW6RbbB24WtZ3xP/2CCmI3tNkNV4oA==",
-      "cpu": [
-        "arm64"
-      ],
-      "dev": true,
-      "license": "MPL-2.0",
-      "optional": true,
-      "os": [
-        "win32"
-      ],
-      "peer": true,
-      "engines": {
-        "node": ">= 12.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/parcel"
-      }
-    },
-    "node_modules/lightningcss-win32-x64-msvc": {
-      "version": "1.30.1",
-      "resolved": "https://registry.npmjs.org/lightningcss-win32-x64-msvc/-/lightningcss-win32-x64-msvc-1.30.1.tgz",
-      "integrity": "sha512-PVqXh48wh4T53F/1CCu8PIPCxLzWyCnn/9T5W1Jpmdy5h9Cwd+0YQS6/LwhHXSafuc61/xg9Lv5OrCby6a++jg==",
-      "cpu": [
-        "x64"
-      ],
-      "dev": true,
-      "license": "MPL-2.0",
-      "optional": true,
-      "os": [
-        "win32"
-      ],
-      "peer": true,
-      "engines": {
-        "node": ">= 12.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/parcel"
-      }
-    },
     "node_modules/lilconfig": {
       "version": "3.1.3",
       "resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-3.1.3.tgz",
@@ -12338,17 +12066,6 @@
         "node": ">= 0.6"
       }
     },
-    "node_modules/node-addon-api": {
-      "version": "8.5.0",
-      "resolved": "https://registry.npmjs.org/node-addon-api/-/node-addon-api-8.5.0.tgz",
-      "integrity": "sha512-/bRZty2mXUIFY/xU5HLvveNHlswNJej+RnxBjOMkidWfwZzgTbPG1E3K5TOxRLOR+5hX7bSofy8yf1hZevMS8A==",
-      "license": "MIT",
-      "optional": true,
-      "peer": true,
-      "engines": {
-        "node": "^18 || ^20 || >= 21"
-      }
-    },
     "node_modules/node-domexception": {
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/node-domexception/-/node-domexception-1.0.0.tgz",
@@ -15810,6 +15527,43 @@
         "url": "https://opencollective.com/webpack"
       }
     },
+    "node_modules/terser": {
+      "version": "5.44.0",
+      "resolved": "https://registry.npmjs.org/terser/-/terser-5.44.0.tgz",
+      "integrity": "sha512-nIVck8DK+GM/0Frwd+nIhZ84pR/BX7rmXMfYwyg+Sri5oGVE99/E3KvXqpC2xHFxyqXyGHTKBSioxxplrO4I4w==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "@jridgewell/source-map": "^0.3.3",
+        "acorn": "^8.15.0",
+        "commander": "^2.20.0",
+        "source-map-support": "~0.5.20"
+      },
+      "bin": {
+        "terser": "bin/terser"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/terser/node_modules/commander": {
+      "version": "2.20.3",
+      "resolved": "https://registry.npmjs.org/commander/-/commander-2.20.3.tgz",
+      "integrity": "sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/terser/node_modules/source-map-support": {
+      "version": "0.5.21",
+      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.21.tgz",
+      "integrity": "sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "buffer-from": "^1.0.0",
+        "source-map": "^0.6.0"
+      }
+    },
     "node_modules/tesseract.js": {
       "version": "5.1.1",
       "resolved": "https://registry.npmjs.org/tesseract.js/-/tesseract.js-5.1.1.tgz",
@@ -16861,29 +16615,6 @@
         "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
       }
     },
-    "node_modules/ws": {
-      "version": "8.18.3",
-      "resolved": "https://registry.npmjs.org/ws/-/ws-8.18.3.tgz",
-      "integrity": "sha512-PEIGCY5tSlUt50cqyMXfCzX+oOPqN0vuGqWzbcJ2xvnkzkq46oOpz7dQaTDBdfICb4N14+GARUDw2XV2N4tvzg==",
-      "license": "MIT",
-      "optional": true,
-      "peer": true,
-      "engines": {
-        "node": ">=10.0.0"
-      },
-      "peerDependencies": {
-        "bufferutil": "^4.0.1",
-        "utf-8-validate": ">=5.0.2"
-      },
-      "peerDependenciesMeta": {
-        "bufferutil": {
-          "optional": true
-        },
-        "utf-8-validate": {
-          "optional": true
-        }
-      }
-    },
     "node_modules/xml": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/xml/-/xml-1.0.1.tgz",
diff --git a/server/src/index.js b/server/src/index.js
index 49a3918..227553a 100644
--- a/server/src/index.js
+++ b/server/src/index.js
@@ -11,6 +11,7 @@ import mealPlanRoutes from './routes/mealPlan.js';
 import uploadRoutes from './routes/upload.js';
 import progressRoutes from './routes/progress.js';
 import ragStatusRoutes from './routes/ragStatus.js';
+import feedbackRoutes from './routes/feedback.js';
 import { initializeRAG } from './langchain/initializeRAG.js';
 
 const app = express();
@@ -57,6 +58,7 @@ app.use('/api/meals', mealPlanRoutes);
 app.use('/api/upload', uploadRoutes);
 app.use('/api/progress', progressRoutes);
 app.use('/api/rag', ragStatusRoutes);
+app.use('/api/feedback', feedbackRoutes);
 
 // Health check
 app.get('/health', (req, res) => {
diff --git a/server/src/routes/chat.js b/server/src/routes/chat.js
index 5ecfa39..f5f3947 100644
--- a/server/src/routes/chat.js
+++ b/server/src/routes/chat.js
@@ -146,5 +146,95 @@ router.delete('/history/:userId', (req, res) => {
     });
   }
 });
+// Store for chat feedback (replace with DB in production)
+const chatFeedback = new Map();
+
+/**
+ * POST /api/chat/feedback
+ * Submit feedback for a chat message
+ */
+router.post('/feedback', async (req, res) => {
+  try {
+    const { userId, messageId, userPrompt, aiResponse, feedbackType } = req.body;
+
+    if (!userId || !messageId || !feedbackType) {
+      return res.status(400).json({
+        success: false,
+        error: { message: 'userId, messageId, and feedbackType are required' },
+      });
+    }
+
+    if (!['thumbs_up', 'thumbs_down'].includes(feedbackType)) {
+      return res.status(400).json({
+        success: false,
+        error: { message: 'feedbackType must be either thumbs_up or thumbs_down' },
+      });
+    }
+
+    const feedbackEntry = {
+      userId,
+      messageId,
+      userPrompt: userPrompt || '',
+      aiResponse: aiResponse || '',
+      feedbackType,
+      timestamp: new Date(),
+    };
+
+    // Store feedback (using messageId as key for easy retrieval)
+    chatFeedback.set(messageId, feedbackEntry);
+
+    logger.info('Chat feedback submitted', {
+      userId,
+      messageId,
+      feedbackType,
+    });
+
+    res.json({
+      success: true,
+      data: {
+        message: 'Feedback submitted successfully',
+        feedbackId: messageId,
+      },
+    });
+  } catch (error) {
+    logger.error('Submit chat feedback failed', { error: error.message });
+    res.status(500).json({
+      success: false,
+      error: { message: 'Failed to submit feedback' },
+    });
+  }
+});
+
+/**
+ * GET /api/chat/feedback/:userId
+ * Get feedback history for a user (admin/analytics use)
+ */
+router.get('/feedback/:userId', (req, res) => {
+  try {
+    const { userId } = req.params;
+    const userFeedback = [];
+
+    // Filter feedback by userId
+    for (const [messageId, feedback] of chatFeedback.entries()) {
+      if (feedback.userId === userId) {
+        userFeedback.push(feedback);
+      }
+    }
+
+    res.json({
+      success: true,
+      data: {
+        feedback: userFeedback,
+        count: userFeedback.length,
+      },
+    });
+  } catch (error) {
+    logger.error('Get chat feedback failed', { error: error.message });
+    res.status(500).json({
+      success: false,
+      error: { message: 'Failed to retrieve feedback' },
+    });
+  }
+});
 
 export default router;
diff --git a/server/src/routes/feedback.js b/server/src/routes/feedback.js
new file mode 100644
index 0000000..cadc279
--- /dev/null
+++ b/server/src/routes/feedback.js
@@ -0,0 +1,130 @@
+import express from 'express';
+import { Logger } from '../utils/logger.js';
+
+const router = express.Router();
+const logger = new Logger('FeedbackRoute');
+
+// Store feedback in memory for now (in production, this should be in a database)
+const feedbackStore = new Map();
+
+/**
+ * Submit feedback for a chat message
+ * POST /api/feedback
+ */
+router.post('/', async (req, res) => {
+  try {
+    const { messageId, userId, feedback, userPrompt, aiResponse } = req.body;
+
+    // Validate required fields
+    if (!messageId || !userId || !feedback) {
+      return res.status(400).json({
+        success: false,
+        error: { message: 'Missing required fields: messageId, userId, feedback' }
+      });
+    }
+
+    // Validate feedback type
+    if (!['thumbs_up', 'thumbs_down'].includes(feedback)) {
+      return res.status(400).json({
+        success: false,
+        error: { message: 'Invalid feedback type. Must be thumbs_up or thumbs_down' }
+      });
+    }
+
+    // Create feedback entry
+    const feedbackEntry = {
+      messageId,
+      userId,
+      feedback,
+      userPrompt: userPrompt || '',
+      aiResponse: aiResponse || '',
+      timestamp: new Date().toISOString(),
+      id: `${userId}_${messageId}_${Date.now()}`
+    };
+
+    // Store feedback
+    feedbackStore.set(feedbackEntry.id, feedbackEntry);
+
+    logger.info(`Feedback received: ${feedback} for message ${messageId} from user ${userId}`);
+
+    res.json({
+      success: true,
+      data: {
+        id: feedbackEntry.id,
+        message: 'Feedback submitted successfully'
+      }
+    });
+
+  } catch (error) {
+    logger.error('Error submitting feedback:', error);
+    res.status(500).json({
+      success: false,
+      error: { message: 'Internal server error' }
+    });
+  }
+});
+
+/**
+ * Get feedback history for a user
+ * GET /api/feedback/:userId
+ */
+router.get('/:userId', async (req, res) => {
+  try {
+    const { userId } = req.params;
+
+    if (!userId) {
+      return res.status(400).json({
+        success: false,
+        error: { message: 'User ID is required' }
+      });
+    }
+
+    // Filter feedback by userId
+    const userFeedback = Array.from(feedbackStore.values())
+      .filter(feedback => feedback.userId === userId)
+      .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
+
+    res.json({
+      success: true,
+      data: userFeedback
+    });
+
+  } catch (error) {
+    logger.error('Error retrieving feedback:', error);
+    res.status(500).json({
+      success: false,
+      error: { message: 'Internal server error' }
+    });
+  }
+});
+
+/**
+ * Get feedback statistics (for admin/analytics)
+ * GET /api/feedback/stats/summary
+ */
+router.get('/stats/summary', async (req, res) => {
+  try {
+    const allFeedback = Array.from(feedbackStore.values());
+    
+    const stats = {
+      total: allFeedback.length,
+      thumbsUp: allFeedback.filter(f => f.feedback === 'thumbs_up').length,
+      thumbsDown: allFeedback.filter(f => f.feedback === 'thumbs_down').length,
+      uniqueUsers: new Set(allFeedback.map(f => f.userId)).size
+    };
+
+    res.json({
+      success: true,
+      data: stats
+    });
+
+  } catch (error) {
+    logger.error('Error retrieving feedback stats:', error);
+    res.status(500).json({
+      success: false,
+      error: { message: 'Internal server error' }
+    });
+  }
+});
+
+export default router;
-- 
2.34.1
